<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:NuGetPackageManagerUI">

	<!--<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
		<Setter Property="Height" Value="28" />
		<Setter Property="FontSize" Value="14" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="Height" Value="28" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>-->

	<Style x:Key="ListView" TargetType="{x:Type ListView}">
		<Setter Property="BorderThickness" Value="0"/> 
		<Setter Property="BorderBrush" Value="Transparent" /> 
	</Style>

	<Style x:Key="SelectableTextBlockStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="IsReadOnly" Value="True"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="-2,0,-2,0"/>
	</Style>

	<!-- In order to create a TextBlock like element, but with selectable text use:
    <TextBox Style="{DynamicResource SelectableTextBlockStyle}" />
    Thanks to juanjo.arana for his style, which we tweaked: http://stackoverflow.com/questions/136435/any-way-to-make-a-wpf-textblock-selectable
  -->
	<!--<Style x:Key="SelectableTextBlockStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="IsReadOnly" Value="True"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Background" Value="Transparent"/> 
		<Setter Property="Padding" Value="-2,0,-2,0"/>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Padding" Value="-2,0,-2,0"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="False" />
					<Condition Property="IsFocused" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<TextBlock Text="{TemplateBinding Text}" 
                             Background="{TemplateBinding Background}"
                             FontSize="{TemplateBinding FontSize}"
                             FontStyle="{TemplateBinding FontStyle}"
                             FontFamily="{TemplateBinding FontFamily}"
                             FontWeight="{TemplateBinding FontWeight}"
                             TextWrapping="{TemplateBinding TextWrapping}"
                             TextTrimming="CharacterEllipsis"
                             Padding="0,0,0,0" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</MultiTrigger>
		</Style.Triggers>
	</Style>-->

	<!-- Style for AJAX-like wait spinners -->
	<Style x:Key="WaitSpinnerStyle" TargetType="Control">
		<Setter Property="Foreground" Value="#888" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Control">
					<Viewbox Visibility="{TemplateBinding Visibility}">
						<Canvas RenderTransformOrigin="0.5,0.5" Width="120" Height="120" >
							<Ellipse Width="21.835" Height="21.862" Canvas.Left="20.1696" Canvas.Top="9.76358" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="1.0"/>
							<Ellipse Width="20.835" Height="20.862" Canvas.Left="2.86816" Canvas.Top="29.9581" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.9"/>
							<Ellipse Width="19.835" Height="19.862" Canvas.Left="0.00001" Canvas.Top="57.9341" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.8"/>
							<Ellipse Width="17.835" Height="17.862" Canvas.Left="12.1203" Canvas.Top="83.3163" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.7"/>
							<Ellipse Width="16.835" Height="16.862" Canvas.Left="36.5459" Canvas.Top="98.1380" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.6"/>
							<Ellipse Width="14.835" Height="14.862" Canvas.Left="64.6723" Canvas.Top="96.8411" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.5"/>
							<Ellipse Width="13.835" Height="13.862" Canvas.Left="87.6176" Canvas.Top="81.2783" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.4"/>
							<Ellipse Width="12.835" Height="12.862" Canvas.Left="98.165"  Canvas.Top="54.4140" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.3"/>
							<Ellipse Width="11.835" Height="11.862" Canvas.Left="92.9838" Canvas.Top="26.9938" Stretch="Fill" Fill="{TemplateBinding Foreground}" Opacity="0.2"/>
							<Canvas.RenderTransform>
								<RotateTransform x:Name="SpinnerRotate" Angle="0" />
							</Canvas.RenderTransform>
							<Canvas.Triggers>
								<EventTrigger RoutedEvent="ContentControl.Loaded">
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation
                                            Storyboard.TargetName="SpinnerRotate"
                                            Storyboard.TargetProperty="Angle"
                                            From="0" To="360" Duration="0:0:01.3"
                                            RepeatBehavior="Forever" />
										</Storyboard>
									</BeginStoryboard>
								</EventTrigger>
							</Canvas.Triggers>
						</Canvas>
					</Viewbox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>