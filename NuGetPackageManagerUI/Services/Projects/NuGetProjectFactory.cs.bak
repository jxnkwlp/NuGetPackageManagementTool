using NuGet.Configuration;
using NuGet.PackageManagement;
using NuGet.ProjectManagement;
using NuGetPackageManagerUI.MsBuild;
using NuGetPackageManagerUI.Services.ProjectServices;
using NuGetPackageManagerUI.Utils;
using System.Linq;
using System.Threading.Tasks;

namespace NuGetPackageManagerUI.VisualStudio
{
	public class NuGetProjectFactory
	{
		public static async Task<NuGetProject> CreateNuGetProjectAsync(ISolutionManager solutionManager, IProjectAdapter projectAdapter, INuGetProjectContext nuGetProjectContext)
		{
			var projectTypeGuids = await projectAdapter.GetProjectTypeGuidsAsync();
			if (projectTypeGuids.Any != VsProjectTypes.CsharpProjectTypeGuid)
			{
				// unsupport
				return null;
			}

			MSBuildProjectSystem projectSystem = new MSBuildProjectSystem(projectAdapter, nuGetProjectContext);

			var targetFrameworkIdentifier = projectManager.GetTargetFrameworkIdentifier();
			var targetFramework = projectManager.GetTargetFramework();
			var projectName = projectManager.GetMSBuildProjectName();
			var nuGetProjectStyle = projectManager.GetNuGetProjectStyle();

			if (nuGetProjectStyle == "PackageReference")
			{
				return CreatePackageReferenceNuGetProject(solutionManager, projectSystem, projectManager);
			}
			else if (nuGetProjectStyle == "PackagesConfig")
			{
				return CreateMSBuildNuGetProject(solutionManager, projectSystem, projectManager);
			}

			if (targetFrameworkIdentifier == ".NETFramework")
			{
				return CreateMSBuildNuGetProject(solutionManager, projectSystem, projectManager);
			}
			else if (targetFrameworkIdentifier == ".NETCoreApp")
			{
				return CreatePackageReferenceNuGetProject(solutionManager, projectSystem, projectManager);
			}

			return null;
		}

		private static NuGetProject CreatePackageReferenceNuGetProject(ISolutionManager solutionManager, MSBuildProjectSystem projectSystem, MsBuildProject projectManager)
		{
			var services = new VsMSBuildProjectSystemServices(projectSystem, projectManager);
			return new NetCorePackageReferenceNuGetProject(projectSystem, services);
		}

		private static NuGetProject CreateMSBuildNuGetProject(ISolutionManager solutionManager, MSBuildProjectSystem projectSystem, MsBuildProject projectManager)
		{
			var nuGetSettings = Settings.LoadDefaultSettings(solutionManager.SolutionDirectory);

			var packagesFolderPath = PackagesFolderPathUtility.GetPackagesFolderPath(solutionManager, nuGetSettings);

			return new MSBuildNuGetProject(projectSystem, packagesFolderPath, projectManager.ProjectDirectory);
		}
	}
}
